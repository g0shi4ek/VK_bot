package bot

import (
	"context"
	"fmt"
	"log"
	"strings"
	"sync"
	"time"

	"github.com/g0shi4ek/VK_bot/database"
	"github.com/g0shi4ek/VK_bot/internal/notifier"
	"github.com/g0shi4ek/VK_bot/internal/scheduler"
	"github.com/g0shi4ek/VK_bot/internal/segmenter"
	"github.com/g0shi4ek/VK_bot/internal/utils"
	"github.com/g0shi4ek/VK_bot/models"
	botgolang "github.com/mail-ru-im/bot-golang"
)

type Handler struct {
	bot           *botgolang.Bot
	db            *database.Database
	notifier      *notifier.Notifier
	segmenter     *segmenter.Segmenter
	scheduler     *scheduler.Scheduler
	commandRouter map[string]func(*botgolang.Message, []string)
	userStates    map[string]UserState
	mu            sync.Mutex
}

type UserState struct {
	Status string
	Data   map[string]interface{}
}

func NewHandler(bot *botgolang.Bot, db *database.Database, notifier *notifier.Notifier,
	segmenter *segmenter.Segmenter, scheduler *scheduler.Scheduler) *Handler {
	h := &Handler{
		bot:        bot,
		db:         db,
		notifier:   notifier,
		segmenter:  segmenter,
		scheduler:  scheduler,
		userStates: make(map[string]UserState),
	}

	h.commandRouter = map[string]func(*botgolang.Message, []string){
		"start":          h.handleStart,
		"help":           h.withLogging(h.handleHelp),
		"create_mailing": h.withLogging(h.withAuth(h.handleCreateMailing)),
		"list_mailings":  h.withLogging(h.withAuth(h.handleListMailings)),
		"add_segment":    h.withLogging(h.withAuth(h.handleAddSegment)),
		"remove_segment": h.withLogging(h.withAuth(h.handleRemoveSegment)),
		"list_segments":  h.withLogging(h.withAuth(h.handleListSegments)),
		"cancel":         h.withLogging(h.withAuth(h.handleCancel)),
	}

	return h
}

func (h *Handler) Start() error {
	log.Println("Starting bot handler...")
	updates := h.bot.GetUpdatesChannel(context.Background())

	for update := range updates {
		if update.Type == botgolang.NEW_MESSAGE {
			msg := update.Payload.Message()
			fmt.Println(msg)

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			if h.checkUserState(msg) {
				continue
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
			if msg.Text != "" && msg.Text[0] == '/' {
				command, args := utils.ParseCommand(msg.Text)
				if handler, ok := h.commandRouter[command]; ok {
					go handler(msg, args)
					continue
				}
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
			go h.handleMessage(msg)
		}
	}

	return nil
}

// –∫–æ–º–∞–Ω–¥–∞ /start
func (h *Handler) handleStart(msg *botgolang.Message, args []string) {
	userRepo := database.NewUserRepository(h.db)
	user, _ := userRepo.GetByChatID(context.Background(), msg.Chat.ID)
	if user != nil {
		h.notifier.SendMessage(msg.Chat.ID, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
		return
	}

	from := msg.Chat
	// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	newUser := &models.User{
		ChatID:    from.ID,
		FirstName: from.FirstName,
		LastName:  from.LastName,
		Segments:  []string{"all"},
	}

	err := userRepo.Create(context.Background(), newUser)
	if err != nil {
		h.notifier.SendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		return
	}

	h.notifier.SendMessage(msg.Chat.ID,
		"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n\n"+
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
}

// –∫–æ–º–∞–Ω–¥–∞ /help
func (h *Handler) handleHelp(msg *botgolang.Message, args []string) {
	helpText := `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üì¨ –†–∞–±–æ—Ç–∞ —Å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏:
/create_mailing - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É
/list_mailings - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–æ–∫

üè∑Ô∏è –†–∞–±–æ—Ç–∞ —Å —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏:
/add_segment - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–≥–º–µ–Ω—Ç
/remove_segment - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–∞
/list_segments - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤

‚ùå /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ`

	h.notifier.SendMessage(msg.Chat.ID, helpText)
}

// /create_mailing
func (h *Handler) handleCreateMailing(msg *botgolang.Message, user *models.User, args []string) {
	// –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	st := make(map[string]interface{}, 0)
	h.saveUserState(msg.Chat.ID, "awaiting_mailing_name", st)

	h.notifier.SendMessage(msg.Chat.ID,
		"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n"+
			"1. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:")
}

// /list_mailings
func (h *Handler) handleListMailings(msg *botgolang.Message, user *models.User, args []string) {
	mailingRepo := database.NewMailingRepository(h.db)
	mailings, err := mailingRepo.ListAll(context.Background())
	if err != nil {
		h.notifier.SendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫.")
		return
	}

	if len(mailings) == 0 {
		h.notifier.SendMessage(msg.Chat.ID, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.")
		return
	}

	var response strings.Builder
	response.WriteString("üì´ –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫:\n\n")
	for _, mailing := range mailings {
		status := "üü¢ –ê–∫—Ç–∏–≤–Ω–∞"
		if mailing.IsSent {
			status = "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
		}
		response.WriteString(fmt.Sprintf(
			"%s\n"+
				"–°–µ–≥–º–µ–Ω—Ç: %s\n"+
				"–î–∞—Ç–∞: %s\n"+
				"–°—Ç–∞—Ç—É—Å: %s\n\n",
			mailing.Name,
			mailing.Segment,
			mailing.ScheduledAt.Format("02.01.2006 15:04"),
			status,
		))
	}

	h.notifier.SendMessage(msg.Chat.ID, response.String())
}

// /add_segment
func (h *Handler) handleAddSegment(msg *botgolang.Message, user *models.User, args []string) {
	if len(args) == 0 {
		// —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
		segmentRepo := database.NewSegmentRepository(h.db)
		segments, err := segmentRepo.ListAll(context.Background())
		if err != nil {
			h.notifier.SendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤.")
			return
		}

		var response strings.Builder
		response.WriteString("üè∑Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:\n\n")
		for _, segment := range segments {
			response.WriteString(fmt.Sprintf(
				" - %s\n",
				segment.Name,
			))
		}
		response.WriteString("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_segment [–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å–µ–≥–º–µ–Ω—Ç–∞]")

		h.notifier.SendMessage(msg.Chat.ID, response.String())
		return
	}

	segmentName := args[0]

	//—Å–æ–∑–¥–∞—ë–º —Å–µ–≥–º–µ–Ω—Ç (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
	if err := h.segmenter.CreateSegmentIfNotExists(context.Background(), segmentName); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞: %v", err)
		h.notifier.SendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ–≥–º–µ–Ω—Ç–∞")
		return
	}

	err := h.segmenter.AddUserToSegment(context.Background(), user.ID, segmentName)
	if err != nil {
		h.notifier.SendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Å–µ–≥–º–µ–Ω—Ç.")
		return
	}

	h.notifier.SendMessage(msg.Chat.ID,
		fmt.Sprintf("–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–µ–≥–º–µ–Ω—Ç %s!", segmentName))
}

// /remove_segment
func (h *Handler) handleRemoveSegment(msg *botgolang.Message, user *models.User, args []string) {
	if len(args) == 0 {
		// —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		var response strings.Builder
		response.WriteString("üè∑Ô∏è –í–∞—à–∏ —Å–µ–≥–º–µ–Ω—Ç—ã:\n\n")
		for _, segment := range user.Segments {
			response.WriteString(fmt.Sprintf("- %s\n", segment))
		}
		response.WriteString("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove_segment [–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å–µ–≥–º–µ–Ω—Ç–∞]")

		h.notifier.SendMessage(msg.Chat.ID, response.String())
		return
	}

	segmentName := args[0]
	err := h.segmenter.RemoveUserFromSegment(context.Background(), user.ID, segmentName)
	if err != nil {
		h.notifier.SendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–∞.")
		return
	}

	h.notifier.SendMessage(msg.Chat.ID,
		fmt.Sprintf("–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–∞ %s!", segmentName))
}

// /list_segments
func (h *Handler) handleListSegments(msg *botgolang.Message, user *models.User, args []string) {
	segmentRepo := database.NewSegmentRepository(h.db)
	segments, err := segmentRepo.ListAll(context.Background())
	if err != nil {
		h.notifier.SendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤.")
		return
	}

	var response strings.Builder
	response.WriteString("üè∑Ô∏è –í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã:\n\n")
	for _, segment := range segments {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ
		inSegment := false
		for _, userSegment := range user.Segments {
			if userSegment == segment.Name {
				inSegment = true
				break
			}
		}

		status := "‚ùå –ù–µ –≤—Ö–æ–¥–∏—Ç–µ"
		if inSegment {
			status = "‚úÖ –í—Ö–æ–¥–∏—Ç–µ"
		}

		response.WriteString(fmt.Sprintf(
			"%s\n%s\n\n",
			segment.Name,
			status,
		))
	}

	h.notifier.SendMessage(msg.Chat.ID, response.String())
}

// /cancel
func (h *Handler) handleCancel(msg *botgolang.Message, user *models.User, args []string) {
	h.clearUserState(msg.Chat.ID)
	h.notifier.SendMessage(msg.Chat.ID, "–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
}

// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –∫–æ–º–∞–Ω–¥—ã)
func (h *Handler) handleMessage(msg *botgolang.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	if state, exists := h.getUserState(msg.Chat.ID); exists {
		switch state.Status {
		case "awaiting_mailing_name":
			h.processMailingName(msg, state)
		case "awaiting_mailing_segment":
			h.processMailingSegment(msg, state)
		case "awaiting_mailing_date":
			h.processMailingDate(msg, state)
		case "awaiting_mailing_message":
			h.processMailingMessage(msg, state)
		default:
			h.notifier.SendMessage(msg.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
		}
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	h.notifier.SendMessage(msg.Chat.ID,
		"–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
}

// –±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (—à–∞–≥ 1)
func (h *Handler) processMailingName(msg *botgolang.Message, state UserState) {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
	state.Data["name"] = msg.Text
	state.Status = "awaiting_mailing_segment"
	h.saveUserState(msg.Chat.ID, state.Status, state.Data)

	h.notifier.SendMessage(msg.Chat.ID,
		"2. –£–∫–∞–∂–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–∏–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):")
}

// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (—à–∞–≥ 2)
func (h *Handler) processMailingSegment(msg *botgolang.Message, state UserState) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞
	if msg.Text != "all" {
		segmentRepo := database.NewSegmentRepository(h.db)
		_, err := segmentRepo.GetByName(context.Background(), msg.Text)
		if err != nil {
			h.notifier.SendMessage(msg.Chat.ID,
				"–°–µ–≥–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ–≥–º–µ–Ω—Ç –∏–ª–∏ 'all'.")
			return
		}
	}

	state.Data["segment"] = msg.Text
	state.Status = "awaiting_mailing_date"
	h.saveUserState(msg.Chat.ID, state.Status, state.Data)

	h.notifier.SendMessage(msg.Chat.ID,
		"3. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 31.12.2023 23:59):")
}

// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É —Ä–∞—Å—Å—ã–ª–∫–∏ (—à–∞–≥ 3)
func (h *Handler) processMailingDate(msg *botgolang.Message, state UserState) {
	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
	scheduledAt, err := utils.ParseTime(msg.Text)
	if err != nil {
		h.notifier.SendMessage(msg.Chat.ID,
			"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –£–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
	if scheduledAt.Before(time.Now()) {
		h.notifier.SendMessage(msg.Chat.ID,
			"–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
		return
	}

	state.Data["scheduled_at"] = scheduledAt.UTC()
	log.Println("scheduled_at", state.Data["scheduled_at"])
	state.Status = "awaiting_mailing_message"
	h.saveUserState(msg.Chat.ID, state.Status, state.Data)

	h.notifier.SendMessage(msg.Chat.ID,
		"4. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
}

// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (—à–∞–≥ 4)
func (h *Handler) processMailingMessage(msg *botgolang.Message, state UserState) {
	// –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
	mailing := &models.Mailing{
		Name:        state.Data["name"].(string),
		Segment:     state.Data["segment"].(string),
		Message:     msg.Text,
		ScheduledAt: state.Data["scheduled_at"].(time.Time),
		IsSent:      false,
	}

	log.Println("created with", mailing.ScheduledAt)

	mailingRepo := database.NewMailingRepository(h.db)
	err := mailingRepo.Create(context.Background(), mailing)
	if err != nil {
		h.notifier.SendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.")
		return
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	h.clearUserState(msg.Chat.ID)

	mskLoc, _ := time.LoadLocation("Europe/Moscow")
	mskTime := mailing.ScheduledAt.In(mskLoc)
	h.notifier.SendMessage(msg.Chat.ID,
		fmt.Sprintf("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ %s —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"+
			"–°–µ–≥–º–µ–Ω—Ç: %s\n"+
			"–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %s",
			mailing.Name,
			mailing.Segment,
			mskTime.Format("02.01.2006 15:04")))
}

// –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

func (h *Handler) saveUserState(chatID string, status string, data map[string]interface{}) {
	h.mu.Lock()
	defer h.mu.Unlock()
	h.userStates[chatID] = UserState{
		Status: status,
		Data:   data,
	}
}

func (h *Handler) getUserState(chatID string) (UserState, bool) {
	h.mu.Lock()
	defer h.mu.Unlock()
	state, ok := h.userStates[chatID]
	return state, ok
}

func (h *Handler) clearUserState(chatID string) {
	h.mu.Lock()
	defer h.mu.Unlock()
	delete(h.userStates, chatID)
}

func (h *Handler) checkUserState(msg *botgolang.Message) bool {
	if state, exists := h.getUserState(msg.Chat.ID); exists {
		switch state.Status {
		case "awaiting_mailing_name":
			h.processMailingName(msg, state)
		case "awaiting_mailing_segment":
			h.processMailingSegment(msg, state)
		case "awaiting_mailing_date":
			h.processMailingDate(msg, state)
		case "awaiting_mailing_message":
			h.processMailingMessage(msg, state)
		default:
			h.notifier.SendMessage(msg.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
		}
		return true
	}
	return false
}
